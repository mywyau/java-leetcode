/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    java
    application
    // Apply the Spring Boot plugin
    // id("org.springframework.boot") version "3.2.0"
    // // Apply the Spring Dependency Management plugin
    // id("io.spring.dependency-management") version "1.1.4"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // // Spring Boot Starter Web for building web applications, including RESTful services
    // implementation("org.springframework.boot:spring-boot-starter-web")
    
    // // Spring Boot Starter Test for testing Spring Boot applications
    // testImplementation("org.springframework.boot:spring-boot-starter-test")
    
    // // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    // testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // // This dependency is used by the application.
    // implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// application {
//     // Define the main class for the application.
//     mainClass = "java_practice.App"
//     // mainClass = "my_springboot.App"  // uncomment and run for other app
// }

tasks.register("LongestSubstringKDistinctCharacters", JavaExec::class) {
    group = "application"
    mainClass = "dsa.sliding_window.variable.LongestSubstringKDistinctCharacters"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("MaximumConsecutiveOnesIII1004", JavaExec::class) {
    group = "application"
    mainClass = "dsa.sliding_window.variable.MaximumConsecutiveOnesIII1004"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("LongestSubstringNoRepeat3", JavaExec::class) {
    group = "application"
    mainClass = "dsa.sliding_window.variable.LongestSubstringNoRepeat3"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("MinSizedSubarray209", JavaExec::class) {
    group = "application"
    mainClass = "dsa.sliding_window.variable.MinSizedSubarray209"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("AverageOfSubarrayOverThreshold", JavaExec::class) {
    group = "application"
    mainClass = "dsa.sliding_window.AverageOfSubarrayOverThreshold"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("MaxAverageSubarray", JavaExec::class) {
    group = "application"
    mainClass = "dsa.sliding_window.MaxAverageSubarray"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("BFSTraversalsExample", JavaExec::class) {
    group = "application"
    mainClass = "dsa.binary_trees.BFSTraversalsExample"
    classpath = sourceSets.main.get().runtimeClasspath
}


tasks.register("MinSubArrayLenExample", JavaExec::class) {
    group = "application"
    mainClass = "dsa.arrays.sliding_window.MinSubArrayLenExample"
    classpath = sourceSets.main.get().runtimeClasspath
}


tasks.register("ContainsDuplicate217", JavaExec::class) {
    group = "application"
    mainClass = "dsa.arrays.ContainsDuplicate217"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("BinarySearchExample2", JavaExec::class) {
    group = "application"
    mainClass = "dsa.searching.BinarySearchExample2"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("BinarySearchExample", JavaExec::class) {
    group = "application"
    mainClass = "dsa.searching.BinarySearchExample"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("LinearSearchExample", JavaExec::class) {
    group = "application"
    mainClass = "dsa.searching.LinearSearchExample"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("MedianFinder", JavaExec::class) {
    group = "application"
    mainClass = "dsa.heaps.MedianFinder"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("LinkedListCycle", JavaExec::class) {
    group = "application"
    mainClass = "dsa.linked_list.LinkedListCycle"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("ReversedLinkedList", JavaExec::class) {
    group = "application"
    mainClass = "dsa.linked_list.ReversedLinkedList"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("BasicArrays", JavaExec::class) {
    group = "application"
    mainClass = "dsa.arrays.BasicArrays"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("QuickSortExample", JavaExec::class) {
    group = "application"
    mainClass = "dsa.sorting.QuickSortExample"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("HeapExample", JavaExec::class) {
    group = "application"
    mainClass = "dsa.heaps.HeapExample"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("KthLargestElement215", JavaExec::class) {
    group = "application"
    mainClass = "dsa.heaps.KthLargestElement215"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("SymmetricTree", JavaExec::class) {
    group = "application"
    mainClass = "dsa.trees.SymmetricTree"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("InvertBinaryTree", JavaExec::class) {
    group = "application"
    mainClass = "dsa.trees.InvertBinaryTree"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("TreeTraversalExamples", JavaExec::class) {
    group = "application"
    mainClass = "dsa.trees.TreeTraversalExamples"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("Fibonacci", JavaExec::class) {
    group = "application"
    mainClass = "dsa.recursion.Fibonacci"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("MaxDepthBinaryTree", JavaExec::class) {
    group = "application"
    mainClass = "dsa.trees.MaxDepthBinaryTree"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("HashMapExamples", JavaExec::class) {
    group = "application"
    mainClass = "basics.HashMapExamples"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("MaxSumSubarray", JavaExec::class) {
    group = "application"
    mainClass = "dsa.arrays.sliding_window.MaxSumSubarray"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("TwoSum", JavaExec::class) {
    group = "application"
    mainClass = "leetcode.easy.TwoSum"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("AddTwoNumbers", JavaExec::class) {
    group = "application"
    mainClass = "dsa.linked_list.AddTwoNumbers"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("ValidParentheses", JavaExec::class) {
    group = "application"
    mainClass = "leetcode.easy.ValidParentheses"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("MergeTwoSortedLists", JavaExec::class) {
    group = "application"
    mainClass = "leetcode.easy.mergeTwoSortedLists.MergeTwoSortedLists"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("MergeStrings", JavaExec::class) {
    group = "application"
    mainClass = "leetcode.easy.MergeStrings"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("RomanNumerals", JavaExec::class) {
    group = "application"
    mainClass = "leetcode.easy.RomanNumerals"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register("CoinChange", JavaExec::class) {
    group = "application"
    mainClass = "dynamic_programming.CoinChange"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
