package leetcode;
/*
 * This source file was generated by the Gradle 'init' task
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import leetcode.easy.MergeStrings;

class MergeStringSpec {

    MergeStrings mergeStrings =  new MergeStrings();

    @Nested
    class MergeAlternately {

        @Test
        public void testEqualLengthStrings() {
            String result = mergeStrings.mergeAlternately("abc", "xyz");
            assertEquals("axbycz", result);
        }

        @Test
        public void testWord1Shorter() {
            String result = mergeStrings.mergeAlternately("ab", "pqrs");
            assertEquals("apbqrs", result);
        }

        @Test
        public void testWord2Shorter() {
            String result = mergeStrings.mergeAlternately("abcd", "pq");
            assertEquals("apbqcd", result);
        }

        @Test
        public void testEmptyWord1() {
            String result = mergeStrings.mergeAlternately("", "hello");
            assertEquals("hello", result);
        }

        @Test
        public void testEmptyWord2() {
            String result = mergeStrings.mergeAlternately("world", "");
            assertEquals("world", result);
        }

        @Test
        public void testBothEmpty() {
            String result = mergeStrings.mergeAlternately("", "");
            assertEquals("", result);
        }

        @Test
        public void testSingleCharEach() {
            String result = mergeStrings.mergeAlternately("a", "b");
            assertEquals("ab", result);
        }

        // @Test
        // public void testUnicodeCharacters() {
        //     String result = mergeStrings.mergeAlternately("🐱🐶", "🦊🐻");
        //     assertEquals("🐱🦊🐶🐻", result);
        // }
    }

    @Nested
    class MergeAlternatelyTwoPointer {

        @Test
        public void testEqualLengthStrings() {
            String result = mergeStrings.mergeAlternatelyTwoPointer("abc", "xyz");
            assertEquals("axbycz", result);
        }

        @Test
        public void testWord1Shorter() {
            String result = mergeStrings.mergeAlternatelyTwoPointer("ab", "pqrs");
            assertEquals("apbqrs", result);
        }

        @Test
        public void testWord2Shorter() {
            String result = mergeStrings.mergeAlternatelyTwoPointer("abcd", "pq");
            assertEquals("apbqcd", result);
        }

        @Test
        public void testEmptyWord1() {
            String result = mergeStrings.mergeAlternatelyTwoPointer("", "hello");
            assertEquals("hello", result);
        }

        @Test
        public void testEmptyWord2() {
            String result = mergeStrings.mergeAlternatelyTwoPointer("world", "");
            assertEquals("world", result);
        }

        @Test
        public void testBothEmpty() {
            String result = mergeStrings.mergeAlternatelyTwoPointer("", "");
            assertEquals("", result);
        }

        @Test
        public void testSingleCharEach() {
            String result = mergeStrings.mergeAlternatelyTwoPointer("a", "b");
            assertEquals("ab", result);
        }

        // @Test
        // public void testUnicodeCharacters() {
        //     String result = mergeStrings.mergeAlternatelyTwoPointer("🐱🐶", "🦊🐻");
        //     assertEquals("🐱🦊🐶🐻", result);
        // }
    }
    
}
